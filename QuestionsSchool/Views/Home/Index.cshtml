@{
    ViewData["Title"] = "Home Page";
}


<section class="content" id="app">

    <div class="row" id="data">
        <div class="col-sm-12">
            <h4>
                University Promt
            </h4>
            <table class="table table-bordered table-hover dataTable">
                <thead>
                    <tr class="row">
                        <th>Universities</th>

                    </tr>
                </thead>
                <tbody>
                    <tr class="row" v-for="a in selects">
                        <td align="center" style="width: 505px;">
                            <v-select :options="a.schools" v-model="a.selected" label="name"></v-select>
                        </td>

                    </tr>

                </tbody>

            </table>

        </div>
        <a v-on:click="addnew()" class="link" href="#"> Add new</a>
        <br />
        <a v-on:click="process()" class="link" href="#">Process Request</a>
    </div>
    <div class="row" id="results" style="display:none">
        <div class="col-sm-12">
            <h4>
                Universities you selected
            </h4>
            <table class="table table-bordered table-hover dataTable">
                <thead>
                    <tr class="row">
                        <th>Schools</th>
                        <th v-for="(a, index) in questions">[[ a.name ]]</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="row" v-for="a in selects">
                        <td align="center" style="width: 305px;">
                            <v-select :options="a.schools" v-model="a.selected" label="name"></v-select>
                        </td>
                        <td v-bind:key="sl.isRelated" v-for="sl in a.selected.questionRels" style="width: 305px;">
                            <img src="~/images/apply.png" v-if="sl.isRelated" width="24" />
                        </td>
                    </tr>

                </tbody>

            </table>

        </div>

    </div>
    <div class="row" id="resultsc" style="display:none">
        <div class="col-sm-12">
            <h4>
                Schools You May Be Interested In Applying To
            </h4>
            <table class="table table-bordered table-hover dataTable">
                <thead>
                    <tr class="row">
                        <th>Schools</th>
                        <th v-for="(a, index) in questions">[[ ]]</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="row" v-for="a in selectscalculated">
                        <td align="center" style="width: 305px;">
                            <v-select :options="a.schools" v-model="a.selected" label="name"></v-select>
                        </td>
                        <td v-bind:key="sl.isRelated" v-for="sl in a.selected.questionRels" style="width: 305px;">
                            <img src="~/images/apply.png" v-if="sl.isRelated" width="24" />
                        </td>
                    </tr>

                </tbody>

            </table>

        </div>

    </div>

</section>


<!-- Vue -->
<!-- include VueJS first -->
<script src="https://unpkg.com/vue@latest"></script>

<!-- use the latest vue-select release -->
<script src="https://unpkg.com/vue-select@latest"></script>
<link rel="stylesheet" href="https://unpkg.com/vue-select@latest/dist/vue-select.css">

<!-- or point to a specific vue-select release -->
<script src="https://unpkg.com/vue-select@3.0.0"></script>
<link rel="stylesheet" href="https://unpkg.com/vue-select@3.0.0/dist/vue-select.css">

<script src="https://unpkg.com/axios@0.12.0/dist/axios.min.js"></script>
<script src="https://unpkg.com/lodash@4.13.1/lodash.min.js"></script>

<script>
    Vue.component('v-select', VueSelect.VueSelect);

    vue_app = new Vue({
        delimiters: ['[[', ']]'],
        el: '#app',
        data: {
            schools: [],
            questions: [],
            selects: [],
            universities: [],
            relatedquestions: [],
            selectscalculated: [],
        },
        methods: {
            addnew() {
                
                this.selects.push({
                    schools: this.schools,
                    selected: {}
                });
                console.log('hola');
            },
            process() {
                
                var l = this.selects.length;
                for (var i = 0; i < l; i++) {

                    if (this.selects[i].selected !== undefined) {
                        var con = this.universities.includes(this.selects[i].selected.name)
                        if (!con) {
                            this.universities.push(this.selects[i].selected.name);
                            for (var x = 0; x < 6; x++) {
                                var isrel = this.selects[i].selected.questionRels[x].isRelated;
                                if (isrel) {
                                    var conrel = this.relatedquestions.includes(this.selects[i].selected.questionRels[x].questionId);
                                    if (!conrel) {
                                        this.relatedquestions.push(this.selects[i].selected.questionRels[x].questionId);
                                    }
                                }
                            }
                        }
                    }
                }

                var schools = this.selects[0].schools;
                for (var y = 0; y < schools.length; y++) {
                    var questionstotal = schools[y].questionRels.length;
                    for (var yy = 0; yy < questionstotal; yy++) {
                        if (schools[y].questionRels[yy].isRelated) {
                            var id2search = schools[y].questionRels[yy].questionId;
                            var isrelated = this.relatedquestions.includes(id2search)
                            if (isrelated) {
                                if (!this.universities.includes(schools[y].name)) {
                                    this.selectscalculated.push({
                                        schools: this.schools,
                                        selected: schools[y]
                                    });
                                    break;
                                }
                            }
                        }
                    }
                }


                var x = document.getElementById("results");
                x.style.display = "block";
                var x = document.getElementById("resultsc");
                x.style.display = "block";
                var x = document.getElementById("data");
                x.style.display = "none";
            },
            getSchools() {
                //event.preventDefault();
                var app = this;
                axios.get('Api/GetSchool')
                    .then(function (response) {
                        app.schools = response.data;
                        app.selects.push({
                            schools: response.data,
                            selected: {}
                        });
                        
                    })
                    .catch(function (error) {
                        alert(error);
                    });


            },
            getQuestions() {
                var app = this;
                axios.get('Api/GetQuestions')
                    .then(function (response) {
                        app.questions = response.data;
                    })
                    .catch(function (error) {
                        alert(error);
                    });

            },
        },
    });


    vue_app.getQuestions();
    vue_app.getSchools();
</script>